{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/ddiaz/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/ddiaz/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/ddiaz/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/ddiaz/portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Updater = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar OutModeDirection_1 = require(\"../../Enums/Directions/OutModeDirection\");\n\nfunction bounceHorizontal(data) {\n  if (data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceHorizontal || data.outMode === \"bounceHorizontal\") {\n    var velocity = data.particle.velocity.horizontal;\n    var bounced = false;\n\n    if (data.direction === OutModeDirection_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === OutModeDirection_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0) {\n      var newVelocity = Utils_1.NumberUtils.getValue(data.particle.particlesOptions.bounce.horizontal);\n      data.particle.velocity.horizontal *= -newVelocity;\n      bounced = true;\n    }\n\n    if (bounced) {\n      var minPos = data.offset.x + data.size;\n\n      if (data.bounds.right >= data.canvasSize.width) {\n        data.particle.position.x = data.canvasSize.width - minPos;\n      } else if (data.bounds.left <= 0) {\n        data.particle.position.x = minPos;\n      }\n    }\n  }\n}\n\nfunction bounceVertical(data) {\n  if (data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceVertical || data.outMode === \"bounceVertical\") {\n    var velocity = data.particle.velocity.vertical;\n    var bounced = false;\n\n    if (data.direction === OutModeDirection_1.OutModeDirection.bottom && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === OutModeDirection_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0) {\n      var newVelocity = Utils_1.NumberUtils.getValue(data.particle.particlesOptions.bounce.vertical);\n      data.particle.velocity.vertical *= -newVelocity;\n      bounced = true;\n    }\n\n    if (bounced) {\n      var minPos = data.offset.y + data.size;\n\n      if (data.bounds.bottom >= data.canvasSize.height) {\n        data.particle.position.y = data.canvasSize.height - minPos;\n      } else if (data.bounds.top <= 0) {\n        data.particle.position.y = minPos;\n      }\n    }\n  }\n}\n\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n  switch (destroy) {\n    case Enums_1.DestroyType.max:\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n\n      break;\n\n    case Enums_1.DestroyType.min:\n      if (value <= minValue) {\n        particle.destroy();\n      }\n\n      break;\n  }\n}\n\nvar Updater = /*#__PURE__*/function () {\n  function Updater(container, particle) {\n    _classCallCheck(this, Updater);\n\n    this.container = container;\n    this.particle = particle;\n  }\n\n  _createClass(Updater, [{\n    key: \"update\",\n    value: function update(delta) {\n      if (this.particle.destroyed) {\n        return;\n      }\n\n      this.updateLife(delta);\n\n      if (this.particle.destroyed || this.particle.spawning) {\n        return;\n      }\n\n      this.updateOpacity(delta);\n      this.updateSize(delta);\n      this.updateAngle(delta);\n      this.updateColor(delta);\n      this.updateStrokeColor(delta);\n      this.updateOutModes(delta);\n    }\n  }, {\n    key: \"updateLife\",\n    value: function updateLife(delta) {\n      var particle = this.particle;\n      var justSpawned = false;\n\n      if (particle.spawning) {\n        particle.lifeDelayTime += delta.value;\n\n        if (particle.lifeDelayTime >= particle.lifeDelay) {\n          justSpawned = true;\n          particle.spawning = false;\n          particle.lifeDelayTime = 0;\n          particle.lifeTime = 0;\n        }\n      }\n\n      if (particle.lifeDuration === -1) {\n        return;\n      }\n\n      if (!particle.spawning) {\n        if (justSpawned) {\n          particle.lifeTime = 0;\n        } else {\n          particle.lifeTime += delta.value;\n        }\n\n        if (particle.lifeTime >= particle.lifeDuration) {\n          particle.lifeTime = 0;\n\n          if (particle.livesRemaining > 0) {\n            particle.livesRemaining--;\n          }\n\n          if (particle.livesRemaining === 0) {\n            particle.destroy();\n            return;\n          }\n\n          var canvasSize = this.container.canvas.size;\n          particle.position.x = Utils_1.NumberUtils.randomInRange(0, canvasSize.width);\n          particle.position.y = Utils_1.NumberUtils.randomInRange(0, canvasSize.height);\n          particle.spawning = true;\n          particle.lifeDelayTime = 0;\n          particle.lifeTime = 0;\n          var lifeOptions = particle.particlesOptions.life;\n          particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n          particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n        }\n      }\n    }\n  }, {\n    key: \"updateOpacity\",\n    value: function updateOpacity(delta) {\n      var _a, _b;\n\n      var particle = this.particle;\n      var opacityAnim = particle.particlesOptions.opacity.anim;\n      var minValue = opacityAnim.minimumValue;\n      var maxValue = particle.particlesOptions.opacity.value;\n\n      if (opacityAnim.enable) {\n        switch (particle.opacity.status) {\n          case Enums_1.AnimationStatus.increasing:\n            if (particle.opacity.value >= maxValue) {\n              particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n            } else {\n              particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n            }\n\n            break;\n\n          case Enums_1.AnimationStatus.decreasing:\n            if (particle.opacity.value <= minValue) {\n              particle.opacity.status = Enums_1.AnimationStatus.increasing;\n            } else {\n              particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n            }\n\n            break;\n        }\n\n        checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n\n        if (!particle.destroyed) {\n          particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n        }\n      }\n    }\n  }, {\n    key: \"updateSize\",\n    value: function updateSize(delta) {\n      var _a, _b;\n\n      var container = this.container;\n      var particle = this.particle;\n      var sizeOpt = particle.particlesOptions.size;\n      var sizeAnim = sizeOpt.animation;\n      var sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n      var maxValue = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n      var minValue = sizeAnim.minimumValue * container.retina.pixelRatio;\n\n      if (sizeAnim.enable) {\n        switch (particle.size.status) {\n          case Enums_1.AnimationStatus.increasing:\n            if (particle.size.value >= maxValue) {\n              particle.size.status = Enums_1.AnimationStatus.decreasing;\n            } else {\n              particle.size.value += sizeVelocity;\n            }\n\n            break;\n\n          case Enums_1.AnimationStatus.decreasing:\n            if (particle.size.value <= minValue) {\n              particle.size.status = Enums_1.AnimationStatus.increasing;\n            } else {\n              particle.size.value -= sizeVelocity;\n            }\n\n        }\n\n        checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n\n        if (!particle.destroyed) {\n          particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n        }\n      }\n    }\n  }, {\n    key: \"updateAngle\",\n    value: function updateAngle(delta) {\n      var _a;\n\n      var particle = this.particle;\n      var rotate = particle.particlesOptions.rotate;\n      var rotateAnimation = rotate.animation;\n      var speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n      var max = 2 * Math.PI;\n\n      if (rotate.path) {\n        particle.pathAngle = Math.atan2(particle.velocity.vertical, particle.velocity.horizontal);\n      } else if (rotateAnimation.enable) {\n        switch (particle.rotate.status) {\n          case Enums_1.AnimationStatus.increasing:\n            particle.rotate.value += speed;\n\n            if (particle.rotate.value > max) {\n              particle.rotate.value -= max;\n            }\n\n            break;\n\n          case Enums_1.AnimationStatus.decreasing:\n          default:\n            particle.rotate.value -= speed;\n\n            if (particle.rotate.value < 0) {\n              particle.rotate.value += max;\n            }\n\n            break;\n        }\n      }\n    }\n  }, {\n    key: \"updateColor\",\n    value: function updateColor(delta) {\n      var _a;\n\n      var particle = this.particle;\n\n      if (particle.color.value === undefined) {\n        return;\n      }\n\n      if (particle.particlesOptions.color.animation.enable) {\n        particle.color.value.h += ((_a = particle.color.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n\n        if (particle.color.value.h > 360) {\n          particle.color.value.h -= 360;\n        }\n      }\n    }\n  }, {\n    key: \"updateStrokeColor\",\n    value: function updateStrokeColor(delta) {\n      var _a, _b;\n\n      var particle = this.particle;\n      var color = particle.stroke.color;\n\n      if (typeof color === \"string\" || color === undefined) {\n        return;\n      }\n\n      if (particle.strokeColor.value === undefined) {\n        return;\n      }\n\n      if (color.animation.enable) {\n        particle.strokeColor.value.h += ((_b = (_a = particle.strokeColor.velocity) !== null && _a !== void 0 ? _a : particle.color.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n\n        if (particle.strokeColor.value.h > 360) {\n          particle.strokeColor.value.h -= 360;\n        }\n      }\n    }\n  }, {\n    key: \"updateOutModes\",\n    value: function updateOutModes(delta) {\n      var _a, _b, _c, _d;\n\n      var outModes = this.particle.particlesOptions.move.outModes;\n      this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, OutModeDirection_1.OutModeDirection.bottom);\n      this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, OutModeDirection_1.OutModeDirection.left);\n      this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, OutModeDirection_1.OutModeDirection.right);\n      this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, OutModeDirection_1.OutModeDirection.top);\n    }\n  }, {\n    key: \"updateOutMode\",\n    value: function updateOutMode(delta, outMode, direction) {\n      var container = this.container;\n      var particle = this.particle;\n\n      switch (outMode) {\n        case Enums_1.OutMode.bounce:\n        case Enums_1.OutMode.bounceVertical:\n        case Enums_1.OutMode.bounceHorizontal:\n        case \"bounceVertical\":\n        case \"bounceHorizontal\":\n          this.updateBounce(delta, direction, outMode);\n          break;\n\n        case Enums_1.OutMode.destroy:\n          if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            container.particles.remove(particle);\n          }\n\n          break;\n\n        case Enums_1.OutMode.out:\n          if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            this.fixOutOfCanvasPosition(direction);\n          }\n\n          break;\n\n        case Enums_1.OutMode.none:\n          this.bounceNone(direction);\n          break;\n      }\n    }\n  }, {\n    key: \"fixOutOfCanvasPosition\",\n    value: function fixOutOfCanvasPosition(direction) {\n      var container = this.container;\n      var particle = this.particle;\n      var wrap = particle.particlesOptions.move.warp;\n      var canvasSize = container.canvas.size;\n      var newPos = {\n        bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n        left: -particle.getRadius() - particle.offset.x,\n        right: canvasSize.width + particle.getRadius() + particle.offset.x,\n        top: -particle.getRadius() - particle.offset.y\n      };\n      var sizeValue = particle.getRadius();\n      var nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n\n      if (direction === OutModeDirection_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n        particle.position.x = newPos.left;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      } else if (direction === OutModeDirection_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n        particle.position.x = newPos.right;\n\n        if (!wrap) {\n          particle.position.y = Math.random() * canvasSize.height;\n        }\n      }\n\n      if (direction === OutModeDirection_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n\n        particle.position.y = newPos.top;\n      } else if (direction === OutModeDirection_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n        if (!wrap) {\n          particle.position.x = Math.random() * canvasSize.width;\n        }\n\n        particle.position.y = newPos.bottom;\n      }\n    }\n  }, {\n    key: \"updateBounce\",\n    value: function updateBounce(delta, direction, outMode) {\n      var container = this.container;\n      var particle = this.particle;\n      var handled = false;\n\n      var _iterator = _createForOfIteratorHelper(container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particleBounce !== undefined) {\n            handled = plugin.particleBounce(particle, delta, direction);\n          }\n\n          if (handled) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (handled) {\n        return;\n      }\n\n      var pos = particle.getPosition(),\n          offset = particle.offset,\n          size = particle.getRadius(),\n          bounds = Utils_1.Utils.calculateBounds(pos, size),\n          canvasSize = container.canvas.size;\n      bounceHorizontal({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n      bounceVertical({\n        particle: particle,\n        outMode: outMode,\n        direction: direction,\n        bounds: bounds,\n        canvasSize: canvasSize,\n        offset: offset,\n        size: size\n      });\n    }\n  }, {\n    key: \"bounceNone\",\n    value: function bounceNone(direction) {\n      var particle = this.particle;\n\n      if (particle.particlesOptions.move.distance) {\n        return;\n      }\n\n      var gravityOptions = particle.particlesOptions.move.gravity;\n      var container = this.container;\n\n      if (!gravityOptions.enable) {\n        if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          container.particles.remove(particle);\n        }\n      } else {\n        var position = particle.position;\n\n        if (gravityOptions.acceleration >= 0 && position.y > container.canvas.size.height && direction === OutModeDirection_1.OutModeDirection.bottom || gravityOptions.acceleration < 0 && position.y < 0 && direction === OutModeDirection_1.OutModeDirection.top) {\n          container.particles.remove(particle);\n        }\n      }\n    }\n  }]);\n\n  return Updater;\n}();\n\nexports.Updater = Updater;","map":{"version":3,"sources":["/Users/ddiaz/portfolio/node_modules/tsparticles/dist/Core/Particle/Updater.js"],"names":["Object","defineProperty","exports","value","Updater","Utils_1","require","Enums_1","OutModeDirection_1","bounceHorizontal","data","outMode","OutMode","bounce","velocity","particle","horizontal","bounced","direction","OutModeDirection","right","bounds","canvasSize","width","left","newVelocity","NumberUtils","getValue","particlesOptions","minPos","offset","x","size","position","bounceVertical","vertical","bottom","height","top","y","checkDestroy","destroy","minValue","maxValue","DestroyType","max","min","container","delta","destroyed","updateLife","spawning","updateOpacity","updateSize","updateAngle","updateColor","updateStrokeColor","updateOutModes","justSpawned","lifeDelayTime","lifeDelay","lifeTime","lifeDuration","livesRemaining","canvas","randomInRange","lifeOptions","life","delay","duration","_a","_b","opacityAnim","opacity","anim","minimumValue","enable","status","AnimationStatus","increasing","decreasing","factor","clamp","sizeOpt","sizeAnim","animation","sizeVelocity","sizeValue","retina","pixelRatio","rotate","rotateAnimation","speed","Math","PI","path","pathAngle","atan2","color","undefined","h","stroke","strokeColor","_c","_d","outModes","move","updateOutMode","default","updateBounce","Utils","isPointInside","getRadius","particles","remove","out","fixOutOfCanvasPosition","none","bounceNone","wrap","warp","newPos","nextBounds","calculateBounds","random","handled","plugins","plugin","particleBounce","pos","getPosition","distance","gravityOptions","gravity","acceleration"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Updater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nconst OutModeDirection_1 = require(\"../../Enums/Directions/OutModeDirection\");\nfunction bounceHorizontal(data) {\n    if (data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceHorizontal ||\n        data.outMode === \"bounceHorizontal\") {\n        const velocity = data.particle.velocity.horizontal;\n        let bounced = false;\n        if ((data.direction === OutModeDirection_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\n            (data.direction === OutModeDirection_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0)) {\n            const newVelocity = Utils_1.NumberUtils.getValue(data.particle.particlesOptions.bounce.horizontal);\n            data.particle.velocity.horizontal *= -newVelocity;\n            bounced = true;\n        }\n        if (bounced) {\n            const minPos = data.offset.x + data.size;\n            if (data.bounds.right >= data.canvasSize.width) {\n                data.particle.position.x = data.canvasSize.width - minPos;\n            }\n            else if (data.bounds.left <= 0) {\n                data.particle.position.x = minPos;\n            }\n        }\n    }\n}\nfunction bounceVertical(data) {\n    if (data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceVertical ||\n        data.outMode === \"bounceVertical\") {\n        const velocity = data.particle.velocity.vertical;\n        let bounced = false;\n        if ((data.direction === OutModeDirection_1.OutModeDirection.bottom &&\n            data.bounds.bottom >= data.canvasSize.height &&\n            velocity > 0) ||\n            (data.direction === OutModeDirection_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0)) {\n            const newVelocity = Utils_1.NumberUtils.getValue(data.particle.particlesOptions.bounce.vertical);\n            data.particle.velocity.vertical *= -newVelocity;\n            bounced = true;\n        }\n        if (bounced) {\n            const minPos = data.offset.y + data.size;\n            if (data.bounds.bottom >= data.canvasSize.height) {\n                data.particle.position.y = data.canvasSize.height - minPos;\n            }\n            else if (data.bounds.top <= 0) {\n                data.particle.position.y = minPos;\n            }\n        }\n    }\n}\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n    switch (destroy) {\n        case Enums_1.DestroyType.max:\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case Enums_1.DestroyType.min:\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nclass Updater {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    update(delta) {\n        if (this.particle.destroyed) {\n            return;\n        }\n        this.updateLife(delta);\n        if (this.particle.destroyed || this.particle.spawning) {\n            return;\n        }\n        this.updateOpacity(delta);\n        this.updateSize(delta);\n        this.updateAngle(delta);\n        this.updateColor(delta);\n        this.updateStrokeColor(delta);\n        this.updateOutModes(delta);\n    }\n    updateLife(delta) {\n        const particle = this.particle;\n        let justSpawned = false;\n        if (particle.spawning) {\n            particle.lifeDelayTime += delta.value;\n            if (particle.lifeDelayTime >= particle.lifeDelay) {\n                justSpawned = true;\n                particle.spawning = false;\n                particle.lifeDelayTime = 0;\n                particle.lifeTime = 0;\n            }\n        }\n        if (particle.lifeDuration === -1) {\n            return;\n        }\n        if (!particle.spawning) {\n            if (justSpawned) {\n                particle.lifeTime = 0;\n            }\n            else {\n                particle.lifeTime += delta.value;\n            }\n            if (particle.lifeTime >= particle.lifeDuration) {\n                particle.lifeTime = 0;\n                if (particle.livesRemaining > 0) {\n                    particle.livesRemaining--;\n                }\n                if (particle.livesRemaining === 0) {\n                    particle.destroy();\n                    return;\n                }\n                const canvasSize = this.container.canvas.size;\n                particle.position.x = Utils_1.NumberUtils.randomInRange(0, canvasSize.width);\n                particle.position.y = Utils_1.NumberUtils.randomInRange(0, canvasSize.height);\n                particle.spawning = true;\n                particle.lifeDelayTime = 0;\n                particle.lifeTime = 0;\n                const lifeOptions = particle.particlesOptions.life;\n                particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n                particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n            }\n        }\n    }\n    updateOpacity(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const opacityAnim = particle.particlesOptions.opacity.anim;\n        const minValue = opacityAnim.minimumValue;\n        const maxValue = particle.particlesOptions.opacity.value;\n        if (opacityAnim.enable) {\n            switch (particle.opacity.status) {\n                case Enums_1.AnimationStatus.increasing:\n                    if (particle.opacity.value >= maxValue) {\n                        particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n                    }\n                    else {\n                        particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n                    }\n                    break;\n                case Enums_1.AnimationStatus.decreasing:\n                    if (particle.opacity.value <= minValue) {\n                        particle.opacity.status = Enums_1.AnimationStatus.increasing;\n                    }\n                    else {\n                        particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n                    }\n                    break;\n            }\n            checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n            if (!particle.destroyed) {\n                particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n            }\n        }\n    }\n    updateSize(delta) {\n        var _a, _b;\n        const container = this.container;\n        const particle = this.particle;\n        const sizeOpt = particle.particlesOptions.size;\n        const sizeAnim = sizeOpt.animation;\n        const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const maxValue = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n        const minValue = sizeAnim.minimumValue * container.retina.pixelRatio;\n        if (sizeAnim.enable) {\n            switch (particle.size.status) {\n                case Enums_1.AnimationStatus.increasing:\n                    if (particle.size.value >= maxValue) {\n                        particle.size.status = Enums_1.AnimationStatus.decreasing;\n                    }\n                    else {\n                        particle.size.value += sizeVelocity;\n                    }\n                    break;\n                case Enums_1.AnimationStatus.decreasing:\n                    if (particle.size.value <= minValue) {\n                        particle.size.status = Enums_1.AnimationStatus.increasing;\n                    }\n                    else {\n                        particle.size.value -= sizeVelocity;\n                    }\n            }\n            checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n            if (!particle.destroyed) {\n                particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n            }\n        }\n    }\n    updateAngle(delta) {\n        var _a;\n        const particle = this.particle;\n        const rotate = particle.particlesOptions.rotate;\n        const rotateAnimation = rotate.animation;\n        const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const max = 2 * Math.PI;\n        if (rotate.path) {\n            particle.pathAngle = Math.atan2(particle.velocity.vertical, particle.velocity.horizontal);\n        }\n        else if (rotateAnimation.enable) {\n            switch (particle.rotate.status) {\n                case Enums_1.AnimationStatus.increasing:\n                    particle.rotate.value += speed;\n                    if (particle.rotate.value > max) {\n                        particle.rotate.value -= max;\n                    }\n                    break;\n                case Enums_1.AnimationStatus.decreasing:\n                default:\n                    particle.rotate.value -= speed;\n                    if (particle.rotate.value < 0) {\n                        particle.rotate.value += max;\n                    }\n                    break;\n            }\n        }\n    }\n    updateColor(delta) {\n        var _a;\n        const particle = this.particle;\n        if (particle.color.value === undefined) {\n            return;\n        }\n        if (particle.particlesOptions.color.animation.enable) {\n            particle.color.value.h += ((_a = particle.color.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n            if (particle.color.value.h > 360) {\n                particle.color.value.h -= 360;\n            }\n        }\n    }\n    updateStrokeColor(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const color = particle.stroke.color;\n        if (typeof color === \"string\" || color === undefined) {\n            return;\n        }\n        if (particle.strokeColor.value === undefined) {\n            return;\n        }\n        if (color.animation.enable) {\n            particle.strokeColor.value.h +=\n                ((_b = (_a = particle.strokeColor.velocity) !== null && _a !== void 0 ? _a : particle.color.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n            if (particle.strokeColor.value.h > 360) {\n                particle.strokeColor.value.h -= 360;\n            }\n        }\n    }\n    updateOutModes(delta) {\n        var _a, _b, _c, _d;\n        const outModes = this.particle.particlesOptions.move.outModes;\n        this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, OutModeDirection_1.OutModeDirection.bottom);\n        this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, OutModeDirection_1.OutModeDirection.left);\n        this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, OutModeDirection_1.OutModeDirection.right);\n        this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, OutModeDirection_1.OutModeDirection.top);\n    }\n    updateOutMode(delta, outMode, direction) {\n        const container = this.container;\n        const particle = this.particle;\n        switch (outMode) {\n            case Enums_1.OutMode.bounce:\n            case Enums_1.OutMode.bounceVertical:\n            case Enums_1.OutMode.bounceHorizontal:\n            case \"bounceVertical\":\n            case \"bounceHorizontal\":\n                this.updateBounce(delta, direction, outMode);\n                break;\n            case Enums_1.OutMode.destroy:\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    container.particles.remove(particle);\n                }\n                break;\n            case Enums_1.OutMode.out:\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    this.fixOutOfCanvasPosition(direction);\n                }\n                break;\n            case Enums_1.OutMode.none:\n                this.bounceNone(direction);\n                break;\n        }\n    }\n    fixOutOfCanvasPosition(direction) {\n        const container = this.container;\n        const particle = this.particle;\n        const wrap = particle.particlesOptions.move.warp;\n        const canvasSize = container.canvas.size;\n        const newPos = {\n            bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n            left: -particle.getRadius() - particle.offset.x,\n            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n            top: -particle.getRadius() - particle.offset.y,\n        };\n        const sizeValue = particle.getRadius();\n        const nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n        if (direction === OutModeDirection_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n            particle.position.x = newPos.left;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        else if (direction === OutModeDirection_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n            particle.position.x = newPos.right;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        if (direction === OutModeDirection_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.top;\n        }\n        else if (direction === OutModeDirection_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.bottom;\n        }\n    }\n    updateBounce(delta, direction, outMode) {\n        const container = this.container;\n        const particle = this.particle;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = Utils_1.Utils.calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n    bounceNone(direction) {\n        const particle = this.particle;\n        if (particle.particlesOptions.move.distance) {\n            return;\n        }\n        const gravityOptions = particle.particlesOptions.move.gravity;\n        const container = this.container;\n        if (!gravityOptions.enable) {\n            if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((gravityOptions.acceleration >= 0 &&\n                position.y > container.canvas.size.height &&\n                direction === OutModeDirection_1.OutModeDirection.bottom) ||\n                (gravityOptions.acceleration < 0 && position.y < 0 && direction === OutModeDirection_1.OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\nexports.Updater = Updater;\n"]},"metadata":{},"sourceType":"script"}